events {
    worker_connections 1024;
}

http {
    # ═══════════════════════════════════════════════════════
    # UPSTREAM BACKEND DEFINITIONS
    # ═══════════════════════════════════════════════════════
    
    upstream tasks_backend {
        server tasks:8001;
    }

    upstream auth_backend {
        server authentication:8002;
    }

    upstream users_backend {
        server users:8003;
    }

    upstream reports_backend {
        server reports:8010;
    }

    # ═══════════════════════════════════════════════════════
    # MAIN SERVER CONFIGURATION
    # ═══════════════════════════════════════════════════════
    
    upstream attachments_backend {
        server taskattachments:8005;
    }

    server {
        listen 80;
        server_name localhost;

        # ────────────────────────────────────────────────────
        # AUTHENTICATION SERVICE
        # ────────────────────────────────────────────────────
        # Allow large file uploads (50MB)
        client_max_body_size 50M;

        # Increase timeout for file uploads
        proxy_connect_timeout 600;
        proxy_send_timeout 600;
        proxy_read_timeout 600;
        send_timeout 600;

        # Route authentication requests to authentication service
        location /api/auth/ {
            # CORS headers
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization' always;

            # Handle preflight OPTIONS requests
            if ($request_method = 'OPTIONS') {
                return 204;
            }

            proxy_pass http://auth_backend/api/auth/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # ────────────────────────────────────────────────────
        # USERS SERVICE (Port 8003)
        # ────────────────────────────────────────────────────
        location /api/users {
            # CORS headers
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization' always;

            # Handle preflight OPTIONS requests
            if ($request_method = 'OPTIONS') {
                return 204;
            }

        # Route users requests to users service
        location /api/users {
            proxy_pass http://users_backend/api/users;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # ────────────────────────────────────────────────────
        # TASKS SERVICE (Port 8001)
        # ────────────────────────────────────────────────────
        location /api/tasks {
            # CORS headers
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization' always;

            # Handle preflight OPTIONS requests
            if ($request_method = 'OPTIONS') {
                return 204;
            }

        # Route tasks requests to tasks service
        location /api/tasks {
            proxy_pass http://tasks_backend/api/tasks;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # ────────────────────────────────────────────────────
        # REPORTS SERVICE (Port 8010)
        # ────────────────────────────────────────────────────
        location /api/reports {
            # CORS headers
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization' always;

            # Handle preflight OPTIONS requests
            if ($request_method = 'OPTIONS') {
                return 204;
            }

            proxy_pass http://reports_backend/api/reports;

            # Special settings for file uploads
            proxy_request_buffering off;
            client_max_body_size 50M;
        }

        # Route task attachments requests to TaskAttachments service
        location /api/task-attachments {
            proxy_pass http://attachments_backend/api/task-attachments;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # ────────────────────────────────────────────────────
        # HEALTH CHECK ENDPOINT
        # ────────────────────────────────────────────────────
        location /health {

            # Special settings for file uploads
            proxy_request_buffering off;
            client_max_body_size 50M;
        }

        # Health check endpoint
        location /health {
            return 200 '{"status": "ok", "services": ["tasks", "authentication", "users", "task-attachments"]}';
            add_header Content-Type application/json;
            return 200 '{"status": "ok", "services": ["tasks", "authentication", "users", "reports"]}';
        }
    }
}
