name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      run_integration:
        description: "Run integration tests"
        required: false
        default: false
        type: boolean

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  backend:
    name: Backend · ${{ matrix.service }}
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        service: [ "Tasks", "TaskAttachments" ,"Users"]   # <-- add backend services here

    # Add job-level services here if a backend service needs its own dependencies (e.g., Redis)
    # For hosted DBs like Supabase, no local DB service is required.

    defaults:
      run:
        working-directory: backend/${{ matrix.service }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          # hash each service's requirements plus shared common if present
          key: ${{ runner.os }}-pip-${{ matrix.service }}-${{ hashFiles(format('backend/{0}/requirements.txt', matrix.service), 'backend/requirements.common.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.service }}-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # if you prefer pre-commit/flake8/black shared via common, that's fine too
          pip install flake8 black pytest pytest-cov

      - name: Export test env
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
        run: |
          echo "ENV=test" >> $GITHUB_ENV
          echo "FLASK_ENV=test" >> $GITHUB_ENV
          # Supply dummy envs if your code expects them; override with repository/environment secrets as needed
          echo "DB_USER=${DB_USER:-test_user}" >> $GITHUB_ENV
          echo "DB_PASSWORD=${DB_PASSWORD:-test_password}" >> $GITHUB_ENV
          echo "DB_HOST=${DB_HOST:-localhost}" >> $GITHUB_ENV
          echo "DB_PORT=${DB_PORT:-5432}" >> $GITHUB_ENV
          echo "DB_NAME=${DB_NAME:-testdb}" >> $GITHUB_ENV
          # Supabase configuration
          echo "SUPABASE_URL=${SUPABASE_URL}" >> $GITHUB_ENV
          echo "SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}" >> $GITHUB_ENV

      - name: Decide integration run
        run: |
          # Prefer manual input, else repository variable CI_RUN_INTEGRATION, else false
          INTEG="${{ github.event.inputs.run_integration || vars.CI_RUN_INTEGRATION || 'false' }}"
          echo "RUN_INTEGRATION=$INTEG" >> $GITHUB_ENV

      # TODO: Uncomment after adding formatter/linter
      # - name: Lint (flake8)
      #   run: flake8 .

      # - name: Format check (black)
      #   run: black --check .


      # If you use Alembic per service, uncomment and adapt path:
      # - name: Run DB migrations
      #   run: alembic upgrade head

      - name: Run tests (skipped if none)
        run: |
          set -e
          if pytest -q --maxfail=1 --disable-warnings \
               --cov=. --cov-report=term-missing --junitxml=pytest-report.xml; then
            echo "Pytest completed."
          else
            code=$?
            if [ "$code" -eq 5 ]; then
              echo "No tests collected. Skipping as success."
              echo '<testsuite name="pytest" tests="0"/>' > pytest-report.xml
              exit 0
            else
              exit $code
            fi
          fi

      - name: Export real DB env for integration (if available)
        if: ${{ env.RUN_INTEGRATION == 'true' }}
        run: |
          # Load from repository or environment secrets if provided
          [ -n "${{ secrets.DB_USER }}" ] && echo "DB_USER=${{ secrets.DB_USER }}" >> $GITHUB_ENV || true
          [ -n "${{ secrets.DB_PASSWORD }}" ] && echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV || true
          [ -n "${{ secrets.DB_HOST }}" ] && echo "DB_HOST=${{ secrets.DB_HOST }}" >> $GITHUB_ENV || true
          [ -n "${{ secrets.DB_PORT }}" ] && echo "DB_PORT=${{ secrets.DB_PORT }}" >> $GITHUB_ENV || true
          [ -n "${{ secrets.DB_NAME }}" ] && echo "DB_NAME=${{ secrets.DB_NAME }}" >> $GITHUB_ENV || true

      - name: Run integration tests
        if: ${{ env.RUN_INTEGRATION == 'true' }}
        env:
          RUN_INTEGRATION: true
        run: |
          pytest -q -m integration --maxfail=1 --disable-warnings --junitxml=pytest-report-integration.xml

      - name: Upload test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-${{ matrix.service }}-pytest-report
          path: backend/${{ matrix.service }}/pytest-report.xml

      - name: Upload integration test report
        if: ${{ always() && env.RUN_INTEGRATION == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: backend-${{ matrix.service }}-pytest-report-integration
          path: backend/${{ matrix.service }}/pytest-report-integration.xml

  frontend:
    name: Frontend · Next.js
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Install
        run: npm ci

      - name: Lint
        run: npm run lint --if-present

      - name: Test
        run: npm test --if-present -- --ci

      - name: Build
        env:
          NEXT_TELEMETRY_DISABLED: 1
        run: npm run build
