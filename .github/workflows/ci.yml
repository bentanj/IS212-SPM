name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  backend:
    name: Backend · ${{ matrix.service }}
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        service: [ "tasks" ]   # <-- add more services here

    services:
      postgres:
        image: postgres:16
        ports: ["5432:5432"]
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
          POSTGRES_DB: testdb
        options: >-
          --health-cmd="pg_isready -U postgres -d testdb"
          --health-interval=10s --health-timeout=5s --health-retries=5

    defaults:
      run:
        working-directory: backend/${{ matrix.service }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          # hash each service's requirements plus shared common if present
          key: ${{ runner.os }}-pip-${{ matrix.service }}-${{ hashFiles(format('backend/{0}/requirements.txt', matrix.service), 'backend/requirements.common.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.service }}-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # if you prefer pre-commit/flake8/black shared via common, that's fine too
          pip install flake8 black pytest pytest-cov

      - name: Export test env
        run: |
          echo "FLASK_ENV=test" >> $GITHUB_ENV
          echo "DATABASE_URL=postgresql+psycopg://postgres@localhost:5432/testdb" >> $GITHUB_ENV
          echo "SUPABASE_URL=http://localhost" >> $GITHUB_ENV
          echo "SUPABASE_ANON_KEY=test" >> $GITHUB_ENV

      - name: Lint (flake8)
        run: flake8 .

      - name: Format check (black)
        run: black --check .

      # If you use Alembic per service, uncomment and adapt path:
      # - name: Run DB migrations
      #   run: alembic upgrade head

      - name: Run tests
        run: |
          pytest -q --maxfail=1 --disable-warnings \
            --cov=. --cov-report=term-missing --junitxml=pytest-report.xml

      - name: Upload test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-${{ matrix.service }}-pytest-report
          path: backend/${{ matrix.service }}/pytest-report.xml

  frontend:
    name: Frontend · Next.js
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Install
        run: npm ci

      - name: Lint
        run: npm run lint --if-present

      - name: Test
        run: npm test --if-present -- --ci

      - name: Build
        env:
          NEXT_TELEMETRY_DISABLED: 1
        run: npm run build
